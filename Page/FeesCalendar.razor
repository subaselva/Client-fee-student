@page "/calendar"
@inject HttpClient Http
@inject IJSRuntime JS

<HeadContent>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
</HeadContent>

<h3 class="title">Student Fees Calendar</h3>

<MudCard Class="custom-card">
    <MudCardContent>
        <!-- Flatpickr Input -->
        <div class="input-container">
            <input type="text" id="calendarInput" class="flatpickr-input custom-input" placeholder="Select a date" />
        </div>
    </MudCardContent>
</MudCard>

@if (fees != null && fees.Any())
{
    <h4>Fees for @(_chosenDate?.ToString("dd-MMM-yyyy"))</h4>
    <ul>
        @foreach (var fee in fees)
        {
            <li>
                <MudText Typo="Typo.h6" Color="Color.Primary">
                    <strong>@fee.StudentName</strong> (Reg No: <strong>@fee.RegistrationNumber</strong>)
                </MudText>

                @if (fee.AdmissionDate.HasValue && fee.AdmissionDate.Value.Date == _chosenDate?.Date)
                {
                    <MudText>
                        🎓 Admission Fee: <strong>@fee.AdmissionFee</strong> | Paid: <strong>@fee.AdmissionAmountPaid</strong>
                    </MudText>
                }
                @if (fee.FirstTermDate.HasValue && fee.FirstTermDate.Value.Date == _chosenDate?.Date)
                {
                    <MudText>
                        📚 First Term Fee: <strong>@fee.FirstTermFee</strong> | Paid: <strong>@fee.FirstTermAmountPaid</strong>
                    </MudText>
                }
                @if (fee.SecondTermDate.HasValue && fee.SecondTermDate.Value.Date == _chosenDate?.Date)
                {
                    <MudText>
                        🏆 Second Term Fee: <strong>@fee.SecondTermFee</strong> | Paid: <strong>@fee.SecondTermAmountPaid</strong>
                    </MudText>
                }
            </li>
            <MudDivider />
        }
    </ul>
}
else if (_chosenDate.HasValue)
{
    <p>No fees data available for @(_chosenDate?.ToString("yyyy-MM-dd")).</p>
}

@code {
    private DateTime? _chosenDate = DateTime.Today;
    private List<StudentFee> fees = new();
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize flatpickr on first render
            await JS.InvokeVoidAsync("initializeFlatpickr", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task UpdateChosenDate(string selectedDate)
    {
        if (DateTime.TryParse(selectedDate, out DateTime parsedDate))
        {
            _chosenDate = parsedDate;
            await FetchData(); // Fetch data automatically on date selection
            StateHasChanged();
        }
    }

    private async Task FetchData()
    {
        if (_chosenDate.HasValue)
        {
            isLoading = true; // Set loading state to true
            var formattedDate = _chosenDate.Value.ToString("yyyy-MM-dd");

            try
            {
                fees = await Http.GetFromJsonAsync<List<StudentFee>>($"api/StudentFees/GetFeesByDate?selectedDate={formattedDate}") ?? new();
                if (fees.Count == 0)
                {
                    fees = null; // No data found
                }
                StateHasChanged(); // Ensure UI updates after data is fetched
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                fees = new(); // No data found
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching data: {ex.Message}");
                fees = null; // Error handling
            }
            finally
            {
                isLoading = false; // Set loading state to false after fetching data
            }
        }
    }
}
