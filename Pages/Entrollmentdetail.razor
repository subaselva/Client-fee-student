@page "/student-enrollment-list"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="mt-3">Student Enrollments</h3>

@if (enrollments == null)
{
    <p>Loading...</p>
}
else if (!enrollments.Any())
{
    <p>No student enrollment available.</p>
}
else
{
    <table class="table table-custom table-hover table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Admission Number</th>
                <th>AdmissionDate</th>
                <th>Class RollNo</th>
                <th>Medium Of Instruction</th>
                <th>Languages Group Studied</th>
                <th>Academic Group Studied</th>
                <th>Subjects Group Studied</th>
                <th>Admitted</th>
                <th>Previous Class</th>
                <th>Marks</th>
                <th>Previous Attendance</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in PaginatedEnrollments)
            {
                <tr>
                    <td>@e.AdmissionNumber</td>
                    <td>@e.AdmissionDate</td>
                    <td>@e.ClassRollNo</td>
                    <td>@e.MediumOfInstruction</td>
                    <td>@e.LanguagesGroupStudied</td>
                    <td>@e.AcademicGroupStudied</td>
                    <td>@e.SubjectsGroupStudied</td>
                    <td>@e.Admitted</td>
                    <td>@e.PreviousClass</td>
                    <td>@e.Marks</td>
                    <td>@e.PreviousAttendance</td>

                    <td style="white-space:nowrap">
                        <div class="d-flex gap-3">
                            <button class="btn btn-info btn-sm" @onclick="() => ViewProfile(e.Id)">View</button>
                            <button class="btn btn-primary btn-sm" @onclick="() => EditProfile(e.Id)">Edit</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination Controls -->
    <div class="d-flex justify-content-between mt-3">
        <button class="btn btn-secondary btn-sm" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary btn-sm" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
}

@code {
    private List<EnrollmentDetail>? enrollments;
    private List<EnrollmentDetail> PaginatedEnrollments => enrollments?.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList() ?? new List<EnrollmentDetail>();
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)(enrollments?.Count ?? 0) / pageSize);
    private const int pageSize = 10; // Number of items per page

    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    protected override async Task OnInitializedAsync()
    {
        enrollments = await Http.GetFromJsonAsync<List<EnrollmentDetail>>("api/EnrollmentDetail/all");
    }

    void ViewProfile(int id) => Navigation.NavigateTo($"/another-enrollment-view/{id}");
    void EditProfile(int id) => Navigation.NavigateTo($"/student-enrollment-edit/{id}");

    void GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    void GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }
}
