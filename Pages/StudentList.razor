@page "/students-list"
@inject IStudentService StudentService
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS 
@using BlazorApp1.Model
<h3 class="title">🎓 Student Management</h3>

<div class="d-flex justify-content-between mb-3">
    <a href="/admin/add-student" class="btn btn-primary d-flex align-items-center gap-2">
        <i class="bi bi-plus-circle"></i> Add Student
    </a>
    <input @bind="SearchQuery" @bind:event="oninput" class="form-control w-25" placeholder="🔍 Search by Name or Reg No..." />
    <div class="d-flex gap-2">
        <button class="btn btn-primary" @onclick="DownloadFullExcel">📄 Export Excel Student</button>
    </div>
    <div class="d-flex gap-2">
        <button class="btn btn-primary" @onclick="DownloadExcel">📄 Export Excel</button>
    </div>
</div>

<table class="table table-custom table-hover table-bordered">
    <thead class="table-dark">
        <tr>
            <th>Roll No</th>
            <th>Name</th>
            <th>Gender</th>
            <th>Date of Birth</th>
            <th>PEN</th>
            <th>Mother Name</th>
            <th>Father Name</th>
            <th>Guardian Name</th>
            <th>Aadhar No</th>
            <th>Aadhar name</th>
            <th>Address</th>
            <th>Pincode</th>
            <th>Mobile</th>
            <th>Alt Mobile</th>
            <th>Email</th>
            <th>Mother Tongue</th>
            <th>Social Category</th>
            <th>Minority Group</th>
            <th>BPL Beneficiary</th>
            <th>AAY Beneficiary</th>
            <th>EWS</th>
            <th>CWSN</th>
            <th>Impairment Type</th>
            <th>Indian?</th>
            <th>Out of School?</th>
            <th>Has Disability Cert?</th>
            <th>Disability %</th>
            <th>Blood Group</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in PaginatedStudents)
        {
            <tr>
                <td>@student.RollNumber</td>
                <td>@student.Name</td>
                <td>@student.Gender</td>
                <td>@(student.DateOfBirth.ToString("yyyy-MM-dd"))</td>
                <td>@student.PermanentEducationNumber</td>
                <td>@student.MotherName</td>
                <td>@student.FatherName</td>
                <td>@student.GuardianName</td>
                <td>@student.AadharNumber</td>
                <td>@student.NameOnAadhar</td>
                <td>@student.Address</td>
                <td>@student.Pincode</td>
                <td>@student.MobileNumber</td>
                <td>@student.AlternateMobileNumber</td>
                <td>@student.Email</td>
                <td>@student.MotherTongue</td>
                <td>@student.SocialCategory</td>
                <td>@student.MinorityGroup</td>
                <td>@student.IsBPLBeneficiary</td>
                <td>@student.IsAAYBeneficiary</td>
                <td>@student.IsEWS</td>
                <td>@student.IsCWSN</td>
                <td>@student.TypeOfImpairment</td>
                <td>@student.IsIndian</td>
                <td>@student.IsOutOfSchool</td>
                <td>@student.HasDisabilityCertificate</td>
                <td>@student.DisabilityPercentage%</td>
                <td>@student.BloodGroup</td>
                <td style="white-space:nowrap">
                    <div class="d-flex gap-2">
                        <button class="btn btn-primary btn-sm w-100" @onclick="() => EditStudent(student.Id)">✏ Edit</button>
                        <button class="btn btn-primary btn-sm w-100" @onclick="() => DeleteStudent(student.Id)">🗑 Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- 🔸 Pagination Controls -->
<div class="mt-3 d-flex justify-content-center gap-2">
    <!-- Prev -->
    <button class="btn btn-outline-secondary"
            @onclick="() => GoToPage(CurrentPage - 1)"
            disabled="@(CurrentPage == 1)">
        ⬅ Prev
    </button>

    <!-- Page numbers - CLICKABLE -->
    @for (int p = 1; p <= TotalPages; p++)
    {
        var pageNumber = p; // 👈 capture the current loop value

        <button class="btn @(pageNumber == CurrentPage ? "btn-primary fw-bold" : "btn-outline-primary")"
                @onclick="() => GoToPage(pageNumber)">
            @pageNumber
        </button>
    }


    <!-- Next -->
    <button class="btn btn-outline-secondary"
            @onclick="() => GoToPage(CurrentPage + 1)"
            disabled="@(CurrentPage == TotalPages)">
        Next ➡
    </button>
</div>

@code {
    private List<BlazorApp1.Model.Student> Students = new();
    private string _searchQuery = "";
    private int CurrentPage = 1;
    private int PageSize = 10;

    private string SearchQuery
    {
        get => _searchQuery;
        set
        {
            _searchQuery = value;
            CurrentPage = 1; // Reset to page 1 on search
        }
    }

    // 🔸 Filtered and Paginated Data
    private List<BlazorApp1.Model.Student> FilteredStudents => Students
        .Where(f =>
            string.IsNullOrWhiteSpace(SearchQuery) ||
            f.Name.ToLower().Contains(SearchQuery.ToLower()) ||
            f.RollNumber.ToString().Contains(SearchQuery))
        .ToList();

    private int TotalPages => (int)Math.Ceiling((double)FilteredStudents.Count / PageSize);

    private List<BlazorApp1.Model.Student> PaginatedStudents => FilteredStudents
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        Students = await StudentService.GetStudents();
    }

    private void EditStudent(int id)
    {
        Navigation.NavigateTo($"/edit-full-student/{id}");
    }

    private async Task DeleteStudent(int id)
    {
        await StudentService.DeleteStudent(id);
        Students = await StudentService.GetStudents();
    }

    private async Task DownloadExcel()
    {
        var response = await Http.GetAsync("api/students/export/excel");

        if (response.IsSuccessStatusCode)
        {
            var bytes = await response.Content.ReadAsByteArrayAsync();
            await JS.InvokeVoidAsync("downloadFile", "Students.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", bytes);
        }
        else
        {
            Console.WriteLine("Excel export failed.");
        }
    }

    private async Task DownloadFullExcel()
    {
        var response = await Http.GetAsync("api/Export/export/excel");

        if (response.IsSuccessStatusCode)
        {
            var bytes = await response.Content.ReadAsByteArrayAsync();
            await JS.InvokeVoidAsync("downloadFile", "Students.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", bytes);
        }
        else
        {
            Console.WriteLine("Excel export failed.");
        }
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
            CurrentPage = page;
    }
}
